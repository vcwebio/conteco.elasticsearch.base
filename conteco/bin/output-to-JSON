#!/usr/bin/env bash
level="$1" # INFO (stdout) or ERROR (stderr)
while read -r INPUT
do

	# there are potentially three timestamps: from filebeat reading the log, from the container processing the output and the output itself
	# internal message must implement following properties in this order: origin, @timestamp, source, level,
  # when implementing custom handler: if INPUT starts with '{ "origin": ' then the message is generated by the platform and should be in format alreayd

	if [[ "$INPUT" == '{ "origin": '* ]] ; then

		printf '%s\n' "$INPUT"

	elif [[ "$INPUT" == '{'* ]] ; then

		timestamp=$( echo "$INPUT" | jq '.timestamp' )
		level=$( echo "$INPUT" | jq '.level' )
		clustername=$( echo "$INPUT" | jq '."cluster.name"' )
		nodename=$( echo "$INPUT" | jq '."node.name"' )
		component=$( echo "$INPUT" | jq '."component"' )
		type=$( echo "$INPUT" | jq '.type' )
		message=$( echo "$INPUT" | jq '.message' )
		message="${clusternam:1:${#clustername}-2} ${nodename:1:${#nodename}-2} ${component:1:${#component}-2} ${message:1:${#message}-2} (${type:1:${#type}-2})"
		printf '{ "origin": "%s", "@timestamp": "%s", "source": "logger", "level": "%s", "message":%s }\n' "$CONTECO_IMAGE" "${timestamp:1:${#timestamp}-2}" "${level:1:${#level}-2}" "$message"

	else

		timestamp=$( to-timestamp )
		message=$( echo "$INPUT" | jq -aR . )
		printf '{ "origin": "%s", "@timestamp": "%s", "source": "logger", "level": "%s", "message":%s }\n' "$CONTECO_IMAGE" "$timestamp" "$level" "$message"

	fi

done
